from Helpers.OCR import TesseractOCR
from Helpers.PatternMatching import PatternMatching
import cv2 as cv
import numpy as np
from numpy import histogram

class GuiObject():
    def __init__(self, img, x, y, w, h):
        self.img = img
        self.x = x
        self.y = y
        self.w = w
        self.h = h

class VerticalLines():
    def __init__(self, x, y, w, h):
        self.x = x
        self.y = y
        self.w = w
        self.h = h

class HorizontalLines():
    def __init__(self, x, y, w, h):
        self.x = x
        self.y = y
        self.w = w
        self.h = h

def ShowImage(image):
    image = cv.resize(image, (1200, 800))
    cv.imshow("", image)
    cv.waitKey(0)

def LoadImage(path):
    image = cv.imread(path)
    return image

def ConvertToBW(image):
    image_bw = cv.cvtColor(image, cv.COLOR_BGR2GRAY)
    return image_bw

def DrawRectangleByCoordinates(image, x, y, w ,h):
    point1 = (x, y)
    point2 = (x + w, y + h)
    cv.rectangle(image, point1, point2, (0, 255, 0), 2)

#test ocr
#img = LoadImage(r"C:\Users\PavelIankin\Desktop\gui\full_screens\tests_main2.bmp")
#TesseractOCR.GetTextFromImage(img)

#test pattern matching
#img = LoadImage(r"C:\Users\PavelIankin\Desktop\gui\full_screens\tests_main.bmp")
#pattern = LoadImage(r"C:\Users\PavelIankin\Desktop\gui\groupsOfElements\filterTests.bmp")
#x, y, w, h = PatternMatching.DetectByPatternMatching(ConvertToBW(img), ConvertToBW(pattern))
#DrawRectangleByCoordinates(img, x, y, w, h)
#ShowImage(img)

#test rectangle
#img = LoadImage(r"C:\Users\PavelIankin\Desktop\gui\full_screens\tests_main.bmp")
#bw = ConvertToBW(img)
#ret,thresh1 = cv.threshold(bw,254,255,cv.THRESH_BINARY)
#kernel = np.ones((5, 5), np.uint8)
#bw_dilation = cv.dilate(thresh1, kernel, iterations=1)
#contours, hierarchy = cv.findContours(bw_dilation, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)
##for cnt in contours:
##    x, y, w, h = cv.boundingRect(cnt)
##    DrawRectangleByCoordinates(img, x, y, w, h)
##np.sort(edges)
#c = max(contours, key = cv.contourArea)
#x, y, w, h = cv.boundingRect(c)
#DrawRectangleByCoordinates(img, x, y, w, h)
#ShowImage(img)

#test table
img = LoadImage(r"C:\Users\PavelIankin\Desktop\gui\groupsOfElements\table_big2.bmp")
bw = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
tableArea = GuiObject(bw, 0, 0, bw.shape[0], bw.shape[1])

#for cells
horizontalLinesArray = []
verticalLinesArray = []

table = bw
#show_pic(table)
#table = tableArea.img
#result = tableArea.img.copy()
# Detect horizontal lines
ret, thresh_value = cv.threshold(table, 230, 255, cv.THRESH_BINARY_INV)
horizontal_kernel = cv.getStructuringElement(cv.MORPH_RECT, (150, 1))
detect_horizontal = cv.morphologyEx(thresh_value, cv.MORPH_OPEN, horizontal_kernel, iterations=1)
cntsH = cv.findContours(detect_horizontal, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)
#show_pic(thresh_value)
# Detect vertical lines
ret, thresh_value = cv.threshold(table, 230, 255, cv.THRESH_BINARY_INV)
vertical_kernel = cv.getStructuringElement(cv.MORPH_RECT, (1, 150))
detect_vertical = cv.morphologyEx(thresh_value, cv.MORPH_OPEN, vertical_kernel, iterations=1)
cntsV = cv.findContours(detect_vertical, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)

new_img = np.zeros([bw.shape[0],bw.shape[1],3],dtype=np.uint8)

#horizontal lines
for i in range(len(cntsH[0])):
    position = len(cntsH[0]) - (i + 1) #нужен реверс т.к. отсчет идет с правой стороны
    x, y , w, h = cv.boundingRect(cntsH[0][position])
    x = x + tableArea.x
    y = y + tableArea.y
    cv.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 1)
    cv.rectangle(new_img, (x, y), (x + w, y + h), (0, 0, 255), 2)
    horizontalLinesArray.append(HorizontalLines(x, y, w, h))

#vertical lines
for i in range(len(cntsV[0])):
    position = len(cntsV[0]) - (i + 1) #нужен реверс т.к. отсчет идет с правой стороны
    #print(position)
    x, y, w, h = cv.boundingRect(cntsV[0][position])
    x = x + tableArea.x
    y = y + tableArea.y
    cv.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 1)
    cv.rectangle(new_img, (x, y), (x + w, y + h), (0, 0, 255), 2)
    verticalLinesArray.append(VerticalLines(x, y, w, h))



contours, hierarchy = cv.findContours(bw_dilation, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)
for cnt in contours:
    x, y, w, h = cv.boundingRect(cnt)
    DrawRectangleByCoordinates(img, x, y, w, h)
    
ShowImage(new_img)
#найти прямоугольник
#найти линии внутри прямоугольника, размером с прямоугольник

